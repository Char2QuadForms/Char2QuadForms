k:=1;
q:=2^k;
if k eq 1 then
	F:=FiniteField(q);
else
	F<s>:=FiniteField(q);
end if;
K<x>:=RationalFunctionField(F);
R<X>:=IntegerRing(K);
P:=ValuationRing(K);
i:=hom<K -> K| 1/x>;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//					Reduced trace computation						//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
forward isSquareScalar;

isSquarePoly:=function(P)
	X:=Parent(P)![0,1];
	L:=Terms(P);
	if L eq [] then
		return P;
	end if;
	Sqrt:=0;
	for i->M in L do
		c:=LeadingCoefficient(M);
		d:=Degree(M);
		if IsOdd(d) then
			return false;
		end if;
		r,s:=isSquareScalar(c);
		if not r then
			return false;
		end if;
		Sqrt+:=eval "s*X^(d div 2)";
	end for;
	return true,Sqrt;
end function;

isSquareK:=function(R)
	iP,P:=isSquarePoly(Numerator(R));
	iQ,Q:=isSquarePoly(Denominator(R));
	if iP and iQ then
		return true,eval "P/Q";
	end if;
	return false;
end function;

isSquareScalar:=function(a)
	L:=Parent(a);
	if L cmpeq F then
		r,t:=IsSquare(a);
		return r,t;
	elif L cmpeq R then
		r,t:=isSquarePoly(a);
		return r,t;
	elif L cmpeq K then
		r,t:=isSquareK(a);
		return r,t;
	else
		error "Not implemented";
	end if;
end function;
		

trdDeg2:=function(a:A:=0)
	if A cmpeq 0 then
		A:=Parent(a);
	end if;
	M:=RepresentationMatrix(a,A);
	Chi:=CharacteristicPolynomial(M);	
	_,Sqrt:=isSquarePoly(Chi);
	return Coefficient(Sqrt,Degree(Sqrt)-1);
end function;

trd:=function(a)
	A:=Parent(a);
	n:=Dimension(A);
	if n eq 4 then
		return trdDeg2(a:A:=A);
	elif IsDivisibleBy(n,2) then
		error "not implemented";
	end if;
	return 1/n*(Trace(a));
end function;
	

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//					Generating random exemples						//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*Random polynomial with degree lower or equal to n over our Galois field*/
randPolyFF := function(n: nonZero:=false,precise:=false,InK:=false)
	d:=n;
	repeat
		if not precise then
			d := Random(n);
		end if;
		repeat
			dom:=Random(F);
		until not precise or dom ne 0;
		p := R!([Random(F) :_ in [0..d-1]] cat [dom]);
	until not (nonZero and (p eq R!0));
	return p;
end function;

/*Random rational function with numerator and denominator degree lower or equal to n over our Galois field*/
randRatFunFF := function(d: nonZero:=false)
	repeat
		x:= K!randPolyFF(d)/K!randPolyFF(d: nonZero:=true);
	until (not nonZero) or x ne 0;
	return x;
end function;

randQuaternaryForm:=function(:d:=2)
	L:=[randRatFunFF(d): i in [1..10]];
	return UpperTriangularMatrix(L);
end function;

randAlmostReducedQuaterForm:=function(:d:=2)
	aOdds:=[randPolyFF(d: nonZero:=true): _ in [1,2]];
	aEvens:=[randRatFunFF(d:nonZero:=true): _ in [1,2]];
	return DiagonalJoin([UpperTriangularMatrix(K,[aOdds[i],aOdds[i],aOdds[i]*aEvens[i]]): i in [1,2]]),aOdds,aEvens;
end function;

randomAlg:=function(A:d:=2,unit:=false)
	n:=Dimension(A);
	repeat
		x:=A![randRatFunFF(d): _ in [1..n]];
	until (not unit) or IsUnit(x);
	return x;
	end function;

scrambleBasis:=function(A:d:=1)
	n:=Dimension(A);
	repeat
		M:=Matrix(K,[[randRatFunFF(d): _ in [1..4]]: _ in [1..4]]);
	until Determinant(M) ne 0;
	B:=[A!M[i]: i in [1..4]];
	C,f:=ChangeBasis(A,B);
	return C,f;
end function;
	

/*Randomly generates an n^2 dimensional algebra over K isomorphic to the order n square matrix algebra.
The parameter d is the bound for the degree of the random entries of the matrix used for construction.*/
randIsoMat:=function(n:d:=1)
	M:=MatrixAlgebra(K,n);
	A1,g:=AssociativeAlgebra(M);
	A,f:=scrambleBasis(A1:d:=d);
	return A, g * f;
end function;

randIsotropicForm:=function(:d:=2)
	A,f:=randIsoMat(2:d:=d);
	Q:=UpperTriangularMatrix(K,[(i eq j) select Determinant(BasisElement(A,i) @@ f) else Determinant(M+N) + Determinant(M) + Determinant(N) where M is (BasisElement(A,i) @@ f) where N is (BasisElement(A,j) @@ f): j in [i..4], i in [1..4]]);
	return Q,A,f;
end function;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 						Utility	for sequences						//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*Swaps in place elements of index i and j in list L*/

swap := procedure(i,j,~L)
    a:=L[i];
    L[i]:=L[j];
    L[j]:=a;
end procedure;

shift:=function(L)
	assert L ne [];
	return [R!0] cat L[1..(#L-1)];
end function;

/* Returns a sequence containing L and then the N sequences obtained by consecutive shifts of L*/
jShifts:=function(L,N)
	bigL:=[L];
	acc:=L;
	for j:= 1 to N do
		acc:=shift(acc);
		Append(~bigL,acc);
	end for;
	return bigL;
end function;

/*L is a sequence of sequences. Return a sequence of sequences of sequences containing first L and then sequences of shifted elements of L, first once, then twice up to n times*/
iShifts:=function(L,N)
	bigL:=[L];
	acc1:=L;
	acc2:=[];
	for i:=1 to N do
		for M in acc1 do
			Append(~acc2,shift(M));
		end for;
		Append(~bigL,acc2);
		acc1:=acc2;
		acc2:=[];
	end for;
	return bigL;
end function;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//						Utility for matrices						//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*Replaces the i-th row of M with R*/
changeRow:=procedure(~M,R,i)
	assert (NumberOfRows(R) eq 1);
	n:=NumberOfColumns(R);
	for j := 1 to n do
		M[i,j]:=R[1,j];
	end for;
end procedure;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//				Utility functions for polynomials and rational functions			//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*Returns the difference of the degrees of the numerator and of the denominator
of r*/
sgnDegree := function(r)
    return (Degree(Numerator(r))-Degree(Denominator(r)));
end function;


/*Returns the norm of a line matrix*/
norm := function(v)
    return Max([sgnDegree(x) : x in ElementToSequence(v) | x ne 0]);
end function;

monic:=function(P)
	if P eq 0 then
		return R!0;
	end if;
	return (LeadingCoefficient(R!P))^(-1) * P;
end function;

removeSquarePrimeDiv:=function(f,a)
	n:=Valuation(a,f);
	f:=K!f;
	return a/f^(n-(n mod 2)),n;
end function;

sqrtModf:=function(a,f)
	f:=R!f;
	q:=quo<R | f>;
	c:=R!(q!a);
	s:=Modexp(c,2^(Degree(f)*k - 1),f);
	return s,ExactQuotient(s^2-a,f);
end function;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//				Computing a maximal order of a Matrix algebra					//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

disc:=function(xs)
	n:=#xs;
	M:=SymmetricMatrix(&cat[[trd(xs[i]*xs[j]): j in [1..i]]: i in [1..n]]);
	return monic(R!Determinant(M));
end function;

denominatorsList:=function(L)
	return [Denominator(r): r in L];
end function;

/*Computes a basis of the almost order from which to start our climb up to a maximal order*/
initialAlmostOrder:=function(A)
	D:=LeastCommonMultiple(&cat[&cat[denominatorsList(Coordinates(A,x)): x in L]: L in BasisProducts(A)]);
	B0:=[D*r: r in Basis(A)];
	return B0;
end function;

/*Compute the R-lattice in A generated by the elements of L*/
basisFromGens:=function(A,L)
	D:=LeastCommonMultiple(&cat[denominatorsList(Coordinates(A,r)):r in L]);
	M:=Matrix(R,[Coordinates(A,D*r): r in L]);
	H:=HermiteForm(M);
	B:=[A![(1/D)*H[i,j]: j in [1..Dimension(A)]]: i in [1..Dimension(A)]];
	return B;
end function;
	
orderFromGens:=function(A,L)
	return Order(R,basisFromGens(A,L));
end function;

/*The built-in lideal Magma function was found to have problematic behaviour with certain inputs*/
lidealFromGens:=function(A,O,L)
	L:=[o*l: o in Basis(O),l in L];
	return basisFromGens(A,[o*l: o in Basis(O),l in L]);
end function;
		
/*Returns a list of length d containing the d lowest degree (possibly zero) coefficients of P*/
coefficientsUpTo:=function(P,d)
	if P eq 0 then
		return [0: _ in [1..d]];
	end if;
	return (Coefficients(P) cat [0: _ in [0..d-Degree(P)]])[1..d];
end function;

/*applies the previous function to a list of polynomials*/
explodeCoeffs:=function(L,d)
	return &cat[coefficientsUpTo(p,d): p in L];
end function;

/*Inverse operation to explodeCoeffs*/
regroupCoeffs:=function(L,d)
	lL:=#L;
	assert IsDivisibleBy(lL,d);
	return [R!L[i..i+d-1]: i in [1..lL by d]];
end function;

/*Returns the Fq-algebra O/gO for g in Fq[X]*/
quotient:=function(O,g)
	d:=Degree(g);
	SC:=[[&cat[coefficientsUpTo(R!((X^(k+l))*r) mod R!g,d): r in ElementToSequence(O!(z*y))]: k in [0..d-1], y in Basis(O)]: l in [0..d-1], z in Basis(O)];
	B:=AssociativeAlgebra<F,Dimension(O)*d|SC>;
	f:=map<O -> B | r:->B!explodeCoeffs(ElementToSequence(r),d), y:->O!regroupCoeffs(Coordinates(B,y),d)>;
	return B,f;
end function;

/*Auxiliary function for turning an R-basis of a lattice into an F-basis of the same lattice mod D0.*/
productsModD0:=function(M,k,N,d)
	N2:=N^2;
	t:=k!X;
	L:=[];
	for i:=1 to N do
		I:=[];
		for j:=1 to N2 do
			acc:=k!M[i][j];
			J:=[acc];
			for l:=1 to 2*d-2 do
				acc*:=t;
				Append(~J,acc);
			end for;
			Append(~I,J);
		end for;
		Append(~L,I);
	end for;
	return L;
end function;

/*Computes the left order of an ideal contained in 1/D0 L, with L the starting order*/
leftOrder:=function(A,I,D0,k)
	P:=Matrix([Coordinates(A,r): r in I]);
	iP:=P^(-1);
	d:=Degree(D0);
	N:=Dimension(A);
	N2:=N^2;
	M:=Matrix([&cat[ElementToSequence(Matrix([Coordinates(A,z*y)])*iP): y in I]: z in Basis(A)]);
	L:=productsModD0(M,k,N,d);
	LHS:=Matrix([explodeCoeffs([L[i,j,l+m]: m in [0..d-1], j in [1..N2]],d):l in [1..d], i in [1..N]]);
	Ker:=Basis(Nullspace(LHS));
	return orderFromGens(A,[1/D0 * A!regroupCoeffs(ElementToSequence(V),d): V in Ker] cat Basis(A));
end function;	

/*I is an ideal of O/gO. f is the projection map from O to O/gO.
Outputs f^(-1)(I)*/
pullbackIdeal:=function(A,f,g,O,I)
	return lidealFromGens(A,O,[r @@ f: r in Basis(I)] cat [g*r: r in Basis(O)]);
end function;
	
/* The jacobson radical of O at g is the pullback of the Jacobson Radical of O/gO*/
arithmeticRadical:=function(A,O,g)
	B,f:=quotient(O,g);
	J:=JacobsonRadical(B);
	I:=pullbackIdeal(A,f,g,O,J);
	return I,B,f,J;
end function;

/* The first step in the computation of an overorder of O maximal at g*/
hereditaryClosureModg:=function(A,O,g,D0,k)
	L2:=O;
	repeat
		L:=L2;
		I,B,f,J:=arithmeticRadical(A,L,g);
		L2:=leftOrder(A,I,D0,k);
	until L eq L2;
	return L2,B,J,f;
end function;
	
/* The second step in the computation of an overorder of O maximal at g*/
overOrderModg:=function(A,O,B,Jaco,f,g,D0,k)
	C,h:=quo<B | Jaco>;
	JCs:=IndecomposableSummands(C);
	for JC in JCs do
		J:=ideal<B | Basis(Jaco) cat [r @@ h : r in Basis(JC)]>;
		I:=pullbackIdeal(A,f,g,O,J);
		L:=leftOrder(A,I,D0,k);
		if L ne O then
			B,f:=quotient(L,g);
			return L,B,JacobsonRadical(B),f;
		end if;
	end for;
	return O,B,J,f;
end function;

maximalOrdermodg:=function(A,O,g,D0,k)
	L,B,J,f:=hereditaryClosureModg(A,O,g,D0,k);
	repeat
		L2:=L;
		L,B,J,f:=overOrderModg(A,L2,B,J,f,g,D0,k);
	until L eq L2;
	return L;
end function;		

maximalOrderFinite:=function(C)
	B0:=initialAlmostOrder(C);
	L:=orderFromGens(C,B0 cat [One(C)]);
	A,f:=ChangeBasis(C,Basis(L));
	L:=Order(R,Basis(A));
	D0:=disc(Basis(A));
	k:=quo<R | D0>;
	for fact in Factorisation(D0) do
		g:=fact[1];
		L:=maximalOrdermodg(A,L,g,D0,k);
	end for;
	return Order(R,[r @@ f: r in Basis(L)]);
end function;

/* Our general strategy to deal with the place at infinity is to apply isomorphism i to everything, solve the issue at the place X and then apply the isomorphism again*/
maximalOrderInfinite:=function(C)
	iBP:=[[[r @ i: r in ElementToSequence(x)]: x in L]: L in BasisProducts(C)];
	iC:=AssociativeAlgebra<K, Dimension(C) | iBP>;
	B0:=initialAlmostOrder(iC);
	A,f:=ChangeBasis(iC,B0);
	D0:=disc(B0);
	L:=orderFromGens(A,Basis(A) cat [One(A)]);
	if IsDivisibleBy(D0,X) then
		k:=quo<R | D0>;
		L:=maximalOrdermodg(A,L,X,D0,k);
	end if;
	return Order(P, [C![r @ i: r in ElementToSequence(x @@ f)]: x in Basis(L)]);
end function;
		
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//					Lattice reduction functions						//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*Reduces a lattice basis in F_q[X]^n in place, using Lenstra's algorithm*/
reduceLatBase := procedure(~B)
    k:=0;
	n:=NumberOfRows(B);
	assert(n eq NumberOfColumns(B));
    norms:=[norm(RowSubmatrix(B,i,1)) : i in [1..n]];
    perms:=[];
    while k lt n do
        _,i:=Min(norms[k+1..n]);
        B:=SwapRows(B,k+1,k+i);
		swap(k+1,k+i,~norms);
		if k gt 0 then
			LHS:=Matrix(F,k,k,[[Coefficient(B[i,j],norms[i]) : j in [1..k]] : i in [1..k]]);
			RHS:=Matrix(F,1,k,[Coefficient(B[k+1,j],norms[k+1]): j in [1..k]]);
			r:=Solution(LHS,RHS);
			b:=RowSubmatrix(B,k+1,1) - &+[r[1][i]*(X^(norms[k+1]-norms[i]))*RowSubmatrix(B,i,1) : i in [1..k]];
			changeRow(~B,b,k+1);
			N:=norm(b);
		end if;
		if k eq 0 or N eq norms[k+1] then
			_,j0:=Max([sgnDegree(B[k+1,j]): j in [k+1..n]]);
			B:=SwapColumns(B,k+1,k+j0);
			Append(~perms,<k+1,k+j0>);
			k+:=1;
		else
			norms[k+1]:=N;
			i0:=Index([norms[i] gt norms[k+1] : i in [1..k+1]],true)-1;
			if i0 ne -1 then
				k:=i0;
			end if;
		end if;
    end while;
    Reverse(~perms);
    for T in perms do
        B:=SwapColumns(B,T[1],T[2]);
    end for;
end procedure;

/*Reduces a lattice basis in F_q(X)^n in place*/
reduceRatLatBase := procedure(~B)
	n:=NumberOfColumns(B);
	assert(n eq NumberOfColumns(B));
    g:=R!1;
    for i := 1 to n do
        for j := 1 to n do
            g:= Lcm(g,Denominator(B[i,j]));
        end for;
    end for;
    gB:=ChangeRing(g*B,R);
    reduceLatBase(~gB);
    B:=(1/g)*gB;
end procedure;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//						Finite algebras							//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*Returns a subalgebra of C isomorphic to C/J, where J is the Jacobson radical of C.*/
WedderburnMalcev:=function(C:Jac:=0)
	if Jac cmpeq 0 then
		Jac:=JacobsonRadical(C);
	end if;
	BJac:=[C!x : x in Basis(Jac)];
	n:=Dimension(C);
	k:=n-#BJac;
	if k eq n then
		return C;
	end if;
	W,f:=VectorSpace(C);
	g:=Inverse(f);
	R:=sub<W | [f(x) : x in BJac]>;
	V:=Complement(W,R);
	NewBase:=[g(x):x in Basis(V)] cat BJac;
	A:=ChangeBasis(C,NewBase);
	W,f:=VectorSpace(A);
	g:=Inverse(f);
	BR:=Basis(A)[k+1..n];
	BV:=Basis(A)[1..k];
	dV:=k;
	R:=sub<W | [f(x) : x in BR]>;
	V:=Complement(W,R);
	B:=Basis(A)[1..k];
	repeat
		Rtmp:=sub<R | [f(x*y) : x in Basis(A)[k+1..n], y in BR] cat [f(y*x) : x in Basis(A)[k+1..n], y in BR]>;
		V:=Complement(R,Rtmp);
		R:=Rtmp;
		BV:=[g(x):x in Basis(V)];
		BR:=[g(x):x in Basis(R)];
		dV:=Dimension(V);
		LHS:=Matrix([&cat[Coordinates(W,ReduceVector(R,f(B[i]*d[j] + d[i]*B[j] - &+[BasisProduct(A,i,j)[s]*d[s] : s in [1..k]]))) : i,j in [1..k]] :
		d in [[A!0 : _ in [1..(i-1)]] cat [d] cat [A!0 : _ in [i+1..k]]: d in BV, i in [1..k]]]);
		RHS:= Matrix([&cat[Coordinates(W,ReduceVector(R,f(&+[BasisProduct(A,i,j)[s]*B[s] : s in [1..k]] - B[i]*B[j]))) : i,j in [1..k]]]);
		Sol:=Solution(LHS,RHS);
		for i := 1 to k do
			B[i]+:=&+[Sol[1][(i-1)*dV+j]*BV[j] : j in [1..dV]];
		end for;
	until Dimension(R) eq 0;
	return sub<C | [&+[x[i]*e : i->e in NewBase] : x in B]>;
end function;


/*A is a simple algebra over F
Returns an isomorphism from M_n(k) to A, with k the center of A.*/
explIso:=function(A)
	rcA,frcA:=AlgebraOverCenter(A);
	k:=BaseField(rcA);
	_,n:=IsSquare(Dimension(rcA));
	I:=MinimalLeftIdeals(rcA:Limit:=1)[1];
	LHS:=Matrix([&cat[Coordinates(I,x*y): y in Basis(I)]: x in Basis(rcA)]);
	phi:=hom<MatrixAlgebra(k,n) -> rcA | M :-> rcA!ElementToSequence(Solution(LHS,Matrix(1,n^2,ElementToSequence(M))))>;
	return phi * frcA;
end function;

/*A is a simple algebra over F.
Returns a complete orthogonal decomposition in primitive idempotents of A*/
decomposeSimple:=function(A)
	if IsCommutative(A) then
		return [A!1];
	end if;
	f:=explIso(A);	
	M:=Domain(f);
	n:=Degree(M);
	return [f(x) : x in Basis(M)[1..n^2 by n+1]];
end function;

/*A is a finite algebra
Returns a complete orthogonoal system of primitive idempotents of A*/
orthSysOfPrimIdems:=function(A)
	W:=WedderburnMalcev(A);
	Ies := DirectSumDecomposition(W);
	return &cat[[A!x : x in decomposeSimple(I)] : I in Ies];
end function;
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//				Computing isomorphism to a matrix algebra over K [2]				//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* The main difficulty here is computing the intersection of a maximal R-order and a maximal P-order as a F-algebra. 
The following functions are steps in computing the structure constants for this algebra.*/

rebaseOfi:=function(Ofi,nA,phi)
	M:=Matrix([Coordinates(nA,phi(e)): e in Basis(Ofi)]);
	reduceRatLatBase(~M);
	return Order(R,[nA!ElementToSequence(M[i]): i in [1..Dimension(nA)]]);
end function;
	
/*given ci and cj elements of the reduced basis of Ofi, expresses their product in the F-basis of Ofi \cap Oinf*/
cicjInC:=function(Ofi,i,j,norms,goodIndices)
	p:=Basis(Ofi)[i]*Basis(Ofi)[j];
	coords:=Coordinates(Ofi,p);
	coordsInC:=&cat[coefficientsUpTo(R!coords[k],-norms[k]+1): k in goodIndices];
	return coordsInC;
end function;
	
computeJCol:=function(Ofi,i,j,norms,goodIndices)
	col:=cicjInC(Ofi,i,j,norms,goodIndices);
	return jShifts(col,-norms[j]);
end function;

computeILine:=function(Ofi,i,norms,goodIndices)
	line:=&cat[computeJCol(Ofi,i,j,norms,goodIndices): j in goodIndices];
	return iShifts(line,-norms[i]);
end function;

/* The map to go back from the F-algebra to the K-algebra once we find idempotent elements*/
returnMap:=function(C,nA,Ofi,norms,goodIndices)
	cumulDims:=[0];
	sum:=0;
	for i in goodIndices do
		sum+:=-norms[i]+1;
		Append(~cumulDims,sum);
	end for;
	return map<C -> nA | c:->&+[R![c[k]: k in [cumulDims[i]+1..cumulDims[i+1]]]*Basis(Ofi)[j]: i->j in goodIndices]>;
end function;

interOrders:=function(A,Ofi,Oinf)
	nA,phi:=ChangeBasis(A,Basis(Oinf));
	Oinf:=Order(P,Basis(nA));
	Ofi:=rebaseOfi(Ofi,nA,phi);
//Now we have Ofi as a maximal R-order with a reduced basis, and coordinates in nA are written with respect to the basis of Oinf.
//The algebra C is generated by the x^j c_i, where (c_i) is our basis of Ofi and 0 <= j <= -norm(c_i).
	norms:=[norm(nA!c): c in Basis(Ofi)];
	goodIndices:=[i: i in [1..Dimension(A)] | norms[i] le 0];
	SC:=&cat[computeILine(Ofi,i,norms,goodIndices): i in goodIndices];
	C:=AssociativeAlgebra<F,#SC|SC>;
	f:=returnMap(C,nA,Ofi,norms,goodIndices);
	return C,f * Inverse(phi);
end function;


/*Given an associative K-algebra A which is isomorphic to a 2x2 matrix algebra over K, returns a rank 1 idempotent element of A*/
rankOneIdempotent:=function(A)
	Ofi:=maximalOrderFinite(A);
	Oinf:=maximalOrderInfinite(A);
	C,f:=interOrders(A,Ofi,Oinf);
	es:=[x @ f: x in orthSysOfPrimIdems(C)];
	return es[Index([Dimension(sub<A | [e*a*e : a in Basis(A)]>) : e in es],1)];
end function;
		
idemToIso:=function(A,e)
	V:=Module(A);
	W:=sub<V | [V!(e*X): X in Basis(A)]>;
	M,f:=AssociativeAlgebra(MatrixAlgebra(K,2));
	Ims:=[Matrix(K,[Coordinates(W,W!((A!w)*X)): w in Basis(W)]) @ f: X in Basis(A)];
	return hom<A -> M| Ims> * Inverse(f);
end function;

explicitIsomorphism:=function(A)
	e:=rankOneIdempotent(A);
	return idemToIso(A,e);
end function;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//					Solving the quadratic form						//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* Auxiliary function for generating nilpotent matrices*/
splitSquare:=function(a)
	F:=Factorisation(a);
	c:=1;
	d:=1;
	for f in F do
		i:=Random(2*f[2]);
		c*:=f[1]^i;
		d*:=f[1]^(2*f[2]-i);
	end for;
	return c,d;
end function;	

/*The last probabilistic step can easily be made deterministic*/
solveTernForm:=function(a1,a2,c)
	A:=AssociativeAlgebra(QuaternionAlgebra<K | a2,a1/c>);
	phi := explicitIsomorphism(A);
	x := Matrix(K,[[0,1],[0,0]]) @@ phi;
	L:=Coordinates(A,x);
	while L[1] eq 0 do
		a:=randPolyFF(10);
		c,d:=splitSquare(a);
		x := Matrix(K,[[a,c],[d,a]]) @@ phi;
		L:=Coordinates(A,x);
	end while;
	return L[3]/L[1],L[4]/L[1];
end function;

bracket:=function(V,v)
	L:=[e: e in Basis(V) | IsIndependent([v,e])];
	i:=Index([DotProduct(v,e) ne 0: e in L],true);
	if i ne 0 then
		w:=L[i];
	else
		w:=L[1] + v;
	end if;
		return (1/DotProduct(v,w))*w;
end function;
	
//The form described in lemma 3.5
//Input: Q as a matrix
//Output: [a1,b1,a2,b2],Matrix of the transformation
canonicalForm:=function(Q)
	V:=QuadraticSpace(Q);
	v1:=Basis(V)[1];
	v2:=bracket(V,v1);
	S:=OrthogonalComplement(V,sub<V | [v1,v2]>);
	u1:=Basis(S)[1];
	u2:=bracket(S,u1);
	return false,[QuadraticNorm(v1),QuadraticNorm(v2),QuadraticNorm(u1),QuadraticNorm(u2)], Matrix(K,[Coordinates(V,v1),Coordinates(V,v2),Coordinates(V,u1),Coordinates(V,u2)]);
end function;

//The form described in Corollary 3.6
//Input is in the same form as the output of canonicalForm
//The output is the a1, a2, a3, a4
reducedForm:=function(as)
	D:=DiagonalMatrix([K|1,as[1],1,as[3]]);
	return [as[1],as[1]*as[2],as[3],as[3]*as[4]],D;
end function;

symbol:=function(f,pi)
	A:=quo<R | pi>;
	return R!(&+[A!f^(2^i): i in [0..k*Degree(pi)-1]]);
end function;

/*The algorithm outlined in lemma 3.12*/
minimalise:=function(a)
	M:=Matrix(K,2,2,[1,0,0,1]);
	g1:=Numerator(a);
	h:=Denominator(a);
	Fh:=Factorisation(h);
	EvenFactors:=[<c[1],c[2]>: c in Fh | IsEven(c[2])];
	for c in EvenFactors do
		f:=c[1];
		A:=quo<R | f>;
		fr:=f^(c[2] div 2);
		h1:=h/(fr^2);
		g:=R!(A!(g1/h1)^(2^(k*Degree(f)-1)));
		M:=Matrix(K,2,2,[1,0,g/fr,1])*M;
		a:=(g^2*h1+g1+fr*h1*g)/h;
		g1:=Numerator(a);
		h:=Denominator(a);
	end for;
	d:=Degree(g1) - Degree(h);
	while d gt 0 and IsEven(d) do
		r:=d div 2;
		_,c:=IsSquare(LeadingCoefficient(g1)/LeadingCoefficient(h));
		M:=Matrix(K,2,2,[1,0,c*x^r,1])*M;
		a:=a+c*x^r+c^2*x^(2*r);
		g1:=Numerator(a);
		h:=Denominator(a);
		d:=Degree(g1) - Degree(h);
	end while;
	return a,M;
end function;

squareFreePart:=function(f)
	P:=R!1;
	C:=R!1;
	f:=R!f;
	for Fact in Factorization(f) do
		q,r:=Quotrem(Fact[2],2);
		if r eq 1 then
			P*:=Fact[1];
		end if;
		C*:=Fact[1]^q;
	end for;
	return LeadingCoefficient(f)*P,C;
end function;

lastAdjustment:=function(as)
	c:=LeastCommonMultiple(Denominator(as[1]),Denominator(as[3]));
	as:=[c^(i mod 2)*a: i->a in as];
	c:=K!GreatestCommonDivisor(Numerator(as[1]),Numerator(as[3]));
	as:=[a/(c^(i mod 2)): i->a in as];
	a1,m1:=squareFreePart(as[1]);
	a3,m3:=squareFreePart(as[3]);
	a2,M2:=minimalise(as[2]);
	a4,M4:=minimalise(as[4]);
	return [a1,a2,a3,a4],DiagonalJoin((1/m1)*M2,(1/m3)*M4);
end function;

//Checks whether the extention generated by a root of X^2+X+a is trivial locally at f. This is mostly useful if a has a pole at f.
isExtentionTrivial:=function(a,f)
	v:=-Valuation(a,f);
	if v le 0 then
		return symbol(a,f) eq 0;
	elif IsOdd(v) then
		return false;
	end if;
	c:=a*f^(v);
	d:=sqrtModf(c,f);
	return $$(a+d^2/f^(v)+d/f^(ExactQuotient(v,2)),f);
end function;

//Checks whether the equation fu^2+f^(r+1)uv+bv^2 = c has a solution mod f^(2r+3)
//We solve it first mod f, then mod f^2, etc...
hasSolModfN:=function(b,c,f,r)
	N:=2*r+3;
	u:=[];
	uprime:=[];
	s1,s2:=sqrtModf(c/b,f);
	v:=[s1];
	vprime:=[s2];
	for i := 2 to r+1 do
		if IsOdd(i) then
			s1,s2:=sqrtModf(uprime[(i-1) div 2]/b,f);
			Append(~v,s1);
			Append(~vprime,s2);
		else
			s1,s2:=sqrtModf(b*vprime[i div 2],f);
			Append(~u,s1);
			Append(~uprime,s2);
		end if;
	end for;

//for moduli f^i with i > r+1, middle terms start appearing
	for i := 1 to r do
		midTerm:=&+[R | u[j]*v[i+1-j]: j in [1..i]];
		l:=r+1+i;
		if IsOdd(l) then
			s1,s2:=sqrtModf((uprime[(l-1) div 2] + midTerm)/b,f);	
			Append(~v,s1);
			Append(~vprime,s2);
		else
			s1,s2:=sqrtModf(b*vprime[l div 2]+midTerm,f);
			Append(~u,s1);
			Append(~uprime,s2);
		end if;
	end for;
	
	if Valuation(c,f) gt 0 then
		s1,s2:=sqrtModf(b*vprime[r+1]+ &+[R | u[j]*v[r+2-j]: j in [1..r]],f);
		Append(~u,s1);
		Append(~uprime,s2);
		return symbol(b*(uprime[r+1] + &+[R | u[j]*v[r+3-j]: j in [2..r+1]])/u[1]^2,f) eq 0;
	else
		return symbol((b*vprime[r+1] + &+[R | u[j]*v[r+2-j]: j in [1..r]])/v[1]^2,f) eq 0;
	end if;
end function;

isInNormGroup:=function(a,c,f)
	if a eq 0 then
		return symbol(c,f) eq 0;
	end if;

	r:=Valuation(Denominator(a),f);
	if r eq 0 then
		return symbol(a,f) eq 0 or IsEven(Valuation(c,f));
	end if;

	return hasSolModfN(a*f^r,removeSquarePrimeDiv(f,f^r*c),f,ExactQuotient(r-1,2));
end function;

goFish:=function(f,as)
	N:=2*Max(Valuation(Denominator(as[2]),f),Valuation(Denominator(as[4]),f))+1;
	D:=Degree(f)*N-1;
	repeat
		c:=randPolyFF(D);
	until Valuation(c,f) le 1 and isInNormGroup(as[2],c/as[1],f) and isInNormGroup(as[4],c/as[3],f);
	return c,N;
end function;

commonValuePole:=function(f,as)
	if (not isExtentionTrivial(as[2]+as[4],f)) or isInNormGroup(as[2],as[1]/as[3],f) then
		c,N:=goFish(f,as);
		return true,c,N;
	end if;
	return false,1,1;
end function;

dealWithPoles:=function(as:verbose:=false)
	tested:=[R|];
	conds:=[R|];
	mods:=[R|];
	c:=R!1;
	for f in Factorisation(Denominator(as[2])) cat Factorisation(Denominator(as[4])) do
		if not f[1] in tested then
			Append(~tested,f[1]);
			found,h,modu:=commonValuePole(f[1],as);
			if not found then
				if verbose then
					printf "Working at the place %o, I could not find a common value for both binary forms. Therefore, this quadratic form is anisotropic.\n",f[1];
				end if;
				return false,[],0,[];
			end if;
			Append(~conds,h);
			Append(~mods,f[1]^modu);
			c*:=f[1]^Valuation(h,f[1]);
		end if;
	end for;
	return true,conds,mods,c,tested;
end function;		

commonValueOdds:=function(f,as)
	syms:=[symbol(a,f):a in as[2..4 by 2]];
	val:=[Valuation(a,f) mod 2: a in as[1..3 by 2]];
	if syms[1] eq syms[2] then
		if syms[1] eq 1 then
			return false,0;
		else
			return true,0;
		end if;
	elif syms[1] eq val[1] then
		return true,1;
	else
		return true,0;
	end if;
end function;

dealWithOdds:=function(as,tested,c,conds,mods:verbose:=false)
	for f in Factorisation(R!as[1]) cat Factorisation(R!as[3]) do
		if not f[1] in tested and IsOdd(f[2]) then
			found,mult:=commonValueOdds(f[1],as);
			if not found then
				if verbose then
					printf "Working at the place %o, I could not find a common value for both binary forms. Therefore, this quadratic form is anisotropic.\n",f[1];
				end if;
				return false,[],0;
			end if;
			if mult eq 1 then
				c*:=f[1];
				Append(~conds,0);
				Append(~mods,f[1]);
			end if;
		end if;
	end for;
	return true,c,conds,mods;
end function;

dealWithInf:=function(as:verbose:=false)
	m:=-Max([Degree(as[1]),Degree(as[3])]);
	ias:=[(x^m * as[1]) @ i,as[2] @ i,(x^m * as[3]) @ i,as[4] @ i];
	ias[2]:=minimalise(ias[2]);
	ias[4]:=minimalise(ias[4]);
	if verbose then
		printf "We are now dealing with the infinite place. After applying the an isomorphism, we work at the place X with the following coefficients: \n a1 = %o, a2 = %o, a3 = %o, a4 = %o \n",ias[1],ias[2],ias[3],ias[4];
	end if;
	if Max([Valuation(Denominator(ias[i]),X): i in [2..4 by 2]]) gt 0 then
		found,hinf,modinf:=commonValuePole(X,ias);	
		v:=Valuation(hinf,X);
		parity:=v mod 2;
		hinf/:=X^v;
		modinf-:=parity;
	elif IsOdd(Degree(as[1]) + Degree(as[3])) then
		found,mult:=commonValueOdds(X,ias);
		hinf:=1;
		parity:=mult;
		modinf:=0;
	else
		found:=true;
		hinf:=1;
		modinf:=0;
		parity:=0;
	end if;
	return found,hinf,modinf,(m+parity) mod 2;
end function;

//Returns a polynomial f of degree d such that (f*X^n+g)*a = cond mod inf^modu (for any polynomial g and n = degree(g)+1)
//Requires modu > 0
factorModInf:=function(cond,a,modu)
	k:=quo<R | X^modu>;
	ia:=k!(X^Degree(a)*(a @ i));
	f:=R!(k!cond/ia);
	return R!(Reverse(coefficientsUpTo(f,modu)));
end function;
	
findH:=function(conds,mods,condInf,modInf,parityCondition,c)
	modFin:=&*mods;
	if modFin eq 1 then
		condFin:=0;
	else
		condFin:=ChineseRemainderTheorem(conds,mods);
	end if;

	if modInf eq 0 then
		factorInf:=R!0;
	else
		factorInf:=factorModInf(condInf,modFin,modInf);
	end if;

//At this point, we need polynomials of the form hc = condFin+(factorInf*X^n+g)*modFin
//such that n = Degree(g)+1 and Degree(g)+Max(Degree(factorInf)+1,0)+Degree(modFin) = parityCondition mod 2
//We look for an hc such that hc/c is prime
	dFin:=Degree(modFin);
	dg:=(parityCondition+Max(Degree(factorInf)+1,0)+dFin) mod 2;
	count:=0;
	repeat
//The next bound is somewhat arbitrary but gives a good change to find a prime polynomial of this degree
		if count gt 5*(dFin+dg+modInf) then
			dg+:=2;
			count:=0;
		end if;
		g:=randPolyFF(dg:precise:=true);
		hc:=condFin+(factorInf*X^(dg+1)+g)*modFin;
		count+:=1;
	until IsPrime(ExactQuotient(hc,c));
	return hc;
end function;

	
solveQuaternaryForm:=function(Q:toTheEnd:=false,verbose:=false)
	deg,can,M1:=canonicalForm(Q);
	if deg then
		if verbose then
			print "This quadratic form is degenerate. Solving aborted.";
		end if;
		return false,[];
	end if;

	//Dealing with the case where either a1 or a3 is zero, since then Corollary 4.6 does not apply
	i:=2*Index(can[1..3 by 2], 0)-1;
	if i ne -1 then
		j:=4-i;
		v:=[K!0: _ in [1..4]];
		v[j]:=1;
		v[i+1]:=1;
		v[i]:=can[j]+can[i+1];
		solVect:=Matrix(K,[v])*M1;
		if verbose then
			print "I found a zero coefficient while reducing the quadratic form.";
		end if;
		return true,ElementToSequence(solVect);
	end if;

	red,M2:=reducedForm(can);
	as,M3:=lastAdjustment(red);
	M:=M3*M2*M1;
	if verbose then
		printf "After reducing the form, we obtain the following coefficients: \na1 = %o\na2 = %o\na3 = %o\na4 = %o.\n\n",as[1],as[2],as[3],as[4];
	end if;
	//Dealing with the case where a2 or a4 is zero
	i:=2*Index(as[2..4 by 2],0);
	if i ne 0 then
		j:=5-i;
		v:=[K!0: _ in [1..4]];
		v[j]:=1;
		v[i-1]:=1;
		v[i]:=1+as[j]/as[i-1];
		solVect:=Matrix(K,[v])*M;
		return true,ElementToSequence(solVect);
	end if;
	
	//Now that pathological cases have been dealt with, we can work on splitting the quaternary form.
	worked1,conds,mods,c,tested:=dealWithPoles(as:verbose:=verbose);
	if not worked1 then
		return false,[];
	end if;
	worked2,c,conds,mods:=dealWithOdds(as,tested,c,conds,mods:verbose:=verbose);
	if not worked2 then
		return false,[];
	end if;
	worked3,hinf,modinf,parityCondition:=dealWithInf(as:verbose:=verbose);
	if not worked3 then
		if verbose then
			printf "Working at the infinite place, I could not find a common value for both binary forms. Therefore, this quadratic form is anisotropic.\n";
		end if;
		return false,[];
	end if;
	if verbose then
		printf "--------------- \n All modular conditions for splitting have been determined. I did not find any obstacle to the form's isotropy. I now need to find a prime polynomial which satisfies all the modular conditions.\n I will call findH with the following input: \n conds: \n %o \n mods :\n %o \n hinf: %o\n modinf: %o \n parityCondition : %o\n c: %o\n",conds,mods,hinf,modinf,parityCondition,c;
		time h:=findH(conds,mods,hinf,modinf,parityCondition,c);
		print "The time above is how long it took to find a suitable irreducible polynomial to build our common value.";
		printf "--------- \n I found H = %o. It should be a common value of both binary forms.\n",h;
	else
		h:=findH(conds,mods,hinf,modinf,parityCondition,c);
	end if;

	if toTheEnd then
		if verbose then
			time x1,x2:=solveTernForm(as[1],as[2],h);
			time x3,x4:=solveTernForm(as[3],as[4],h);
			print "The two times displayed above are the time it took for each execution of solveTernForm.";
		else
			x1,x2:=solveTernForm(as[1],as[2],h);
			x3,x4:=solveTernForm(as[3],as[4],h);
		end if;
		solVect:=Matrix(K,[[x1,x2,x3,x4]])*M;
		return true,ElementToSequence(solVect);
	end if;
	return true,[];
end function;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//						Test Procedures							//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
quatFormEval:=function(Q,xs)
	return &+[Q[i,j]*xs[i]*xs[j]: i,j in [1..4]];
end function;

/* Flags:
d is the degree of the random polynomials appearing in the generation of the quadratic form Q.
reduced, if true, sets the procedure to generate values a1,a2,a3,a4 instead of a generic non degenerate quadratic form.
isotropic, if true, generates the matrix Q from scrambling the basis of a matrix algebra. As as result, the quadratic form can not be anisotropic.
Note: The flag reduced and isotropic are not compatible. If both are set on, isotropic will be ignored
toTheEnd: If set on true, the procedure will compute a solution of the quadratic form. If set on false, the procedure will simply compute a common value of both binary forms, but it will not call the ternary form solver. This is useful on the calculator, when computing maximalOrder might be to expensive but we still want to see the result of the splitting.
*/

//Generates a random quaternary quadratic form, solves it and checks whether the solution is correct.
testQuaternForm:=procedure(:d:=2,reduced:=false,isotropic:=false,toTheEnd:=true)
	if reduced then
		if isotropic then
			print "Flag isotropic ignored because flag reduced is also set";
		end if;
		Q:=randAlmostReducedQuaterForm(:d:=d);
	elif isotropic then
		Q:=randIsotropicForm(:d:=d);
	else
		Q:=randQuaternaryForm(:d:=d);
	end if;
	printf "We are about to test solveQuaternaryForm. Our quadratic form is defined by the following matrix:\n%o\n",Q;
	time found,xs:=solveQuaternaryForm(Q:toTheEnd:=toTheEnd,verbose:=true);
	print "Right above is the time it took to execute solveQuaternaryForm";
	if toTheEnd and found then
		s:=quatFormEval(Q,xs);
		print "-----";
		printf "So, the solution we found in the end is as follows: \n%o\n When we plug it in the quadratic form, we obtain %o.\n",xs,s;
	end if;
end procedure;

//Solves the quaternary form a1(x1^2+x1x2+a2x2^2) + a3(x3^2+x3x4+a4x4^2) and checks that the solution is correct.
testWith:=procedure(a1,a2,a3,a4:toTheEnd:=true)
	Q:=DiagonalJoin(UpperTriangularMatrix(K,[a1,a1,a1*a2]),UpperTriangularMatrix(K,[a3,a3,a3*a4]));
	print Q;
	time found,xs := solveQuaternaryForm(Q:toTheEnd:=toTheEnd,verbose:=true);
	print "Right above is the time it took to execute solveQuaternaryForm";
	if toTheEnd and found then
		s:=quatFormEval(Q,xs);
		print "-----";
		printf "So, the solution we found in the end is as follows: \n%o\n When we plug it in the quadratic form, we obtain %o.\n",xs,s;
	end if;
end procedure;
